// Relazione Progetto SO Phase1
La scelta implementativa sia per quanto riguarda le strutture di dati sia per le funzioni relative a pcb e semafori segue pressochè la descrizione del file
di istruzioni in allegato alla fase1 relativa al progetto del corso di sistemi operativi.

// PCBs

Il PCB è inizializzato con i campi p_parent, p_sib.next, p_sib.prev, p_next.next e p_next.prev a NULL.
Il campo p_child viene inizializzato con INIT_LIST_HEAD(&p->p_child) che inizializza la sentinella della lista dei figli che punta a se stessa (lista vuota).

// PCBs QUEUES

La lista pcbFree è una lista circolare bidirezionale con sentinella (pcbFree_h) e il campo struct list_head p_next della struct pcb_t è usato come concatenatore dei vari pcb_t fra di loro e con la sentinella, anch'essa di tipo struct list_head.
La circolarità della lista semplifica aspetti come l'inserimento o la rimozione in testa e/o in coda di elementi nella/dalla lista.

L'uso della sentinella è stato mantenuto per la leggibilità del codice.

// PCBs TREES

I PCB possono essere organizzati ad albero.
Ogni PCB genitore attraverso il proprio campo p_child punta alla sentinella della lista dei suoi figli concatenati tra loro dal campo p_sib, il primo figlio sarà il primo elemento dopo la sentinella, ovvero p_child.next .
Ogni PCB punta al proprio padre con un campo specifico per questo scopo struct pcb_t* p_parent

// SEMAFORI

La lista semdFree dei semafori liberi è una lista circolare bidirezionale con sentinella e il campo struct list_head s_next della struct semd_t è usato come concatenatore dei vari semd_t fra di loro e con la sentinella, anch'essa di tipo struct list_head.

// ASL: lista dei semafori attivi

La lista dei semafori attivi ASL è una lista circolare bidirezionale con sentinella (semdFree_h) e il campo struct list_head s_next della struct semd_t è usato come concatenatore dei vari semd_t fra di loro e con la sentinella.

I processi bloccati in coda ad un semaforo formano una lista. Ogni semaforo punta al primo elemento di questa lista attraverso il proprio campo
struct list_head s_procQ.next; e il primo PCB bloccato su un semaforo punta al successivo attraverso il proprio campo struct list_head p_next.next.
In questo caso la lista dei processi bloccati su un semaforo è bidirezionale, non circolare senza sentinella.

Ogni PCB specifica il semaforo su cui è bloccato con un campo specifico per questo scopo, int *s_key, che punta alla stessa chiave che identifica il semaforo su cui il pcb è bloccato.

// Generic

Si è cercato di sfruttare il più possibile le macro del file listx.h per migliorare la leggibilità del codice, e di definire funzioni per gli aspetti
più ripetitivi o con un forte significato logico in vista anche di una migliore riusabilità del codice.
